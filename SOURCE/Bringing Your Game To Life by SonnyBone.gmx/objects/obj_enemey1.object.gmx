<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_walk_r</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_moveable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

S_GRAVITY       = 0.3;      //Accel. due to gravity (pixels/step*step)
S_RUN_ACCEL     = 0.3;      //Accel. from running on ground (pixels/step*step)
S_RUN_FRIC      = 0.10;      //Friction on the ground (pixels/step*step)
S_AIR_ACCEL     = 0.4;      //Accel. from running in the air (pixels/step*step)
S_AIR_FRIC      = 0.2;      //Friction in the air (pixels/step*step)
S_JUMP_SPEED    = -6;
S_DJUMP_SPEED   = -4;       //Double jump speed

S_MAX_H         = 1.5;

// speed is randomized for iteratio 7 +
if global.version &gt;= 7
{
    S_MAX_H         = random_range(1,2.5);        //Max horizontal speed
}


S_MAX_V         = 5;        //Max vertical speed
S_SLOPE_SLOW    = 0.7;      //Decceleration while climbing slopes

//Whether the player can currently double jump
candj = false;   

image_xscale = 2;
image_yscale = 2;

// set animation on/off based on version 2+
image_speed = 0;
if global.version &gt;= 2
    {
        image_speed = .25;
    }

moving = "left";

// starting sprite randomization for iteration 7 + 

if global.version &gt;= 7
{
    image_index = floor(random_range(1,6));
}

// set the HP depending on version
if global.version &gt;= 7
{
    hp = 5;
}
else
{
    hp = 1;
}

hit = "no";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// replace dead enemy with a new one (for demo purposes)
// only happens on versions 1-6 (before multiple enemies appear)
if global.version &lt; 7
{
    instance_create(512,240,obj_enemey1);
}

// death fx only exist on version 9+

if global.version &gt;= 9

{

// play sound
sound_stop(snd_enemy_explode1);
sound_play(snd_enemy_explode1);
// create death particle and gibs

part_particles_create(obj_player.blood_particle_system, random_range(x-10, x+10), random_range(y-10, y+10), obj_player.blood_part1, 1);
part_particles_create(obj_player.blood_particle_system, random_range(x-10, x+10), random_range(y-10, y+10), obj_player.blood_part1, 1);
part_particles_create(obj_player.blood_particle_system, random_range(x-10, x+10), random_range(y-10, y+10), obj_player.blood_part1, 1);
part_particles_create(obj_player.blood_particle_system, random_range(x-10, x+10), random_range(y-10, y+10), obj_player.blood_part1, 1);
part_particles_create(obj_player.blood_particle_system, random_range(x-10, x+10), random_range(y-10, y+10), obj_player.blood_part1, 1);

instance_create(x, y, obj_gib1);
instance_create(x, y, obj_gib1);
instance_create(x, y, obj_gib1);
instance_create(x, y, obj_gib1);
instance_create(x, y, obj_gib1);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);
instance_create(x, y, obj_gib2);

//create screen shake
instance_create(x,y,obj_screen_shake);

//create white flash
instance_create(view_xview - 50, view_yview - 50, obj_white_screen_flash);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = "no";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*      PLAYER INPUT EVAL       */

var accel, fric;
if (on_ground) {
    state = "grounded";
    accel = S_RUN_ACCEL;
    fric = S_RUN_FRIC;
} else {
    accel = S_AIR_ACCEL;
    fric = S_AIR_FRIC;
}


if (moving = "right")
{
    //Running right
    
    //First add friction if currently running left
    if (hspd &lt; 0)
        hspd = approach( hspd, 0, fric );
        
    hspd = approach( hspd, S_MAX_H, accel ); 

} 

if (moving = "left")
{
    //Running left
    
    //First add friction if currently running right
    if (hspd &gt; 0)
        hspd = approach( hspd, 0, fric );
        
    hspd = approach( hspd, -S_MAX_H, accel );

} else {
    //Stopping

    hspd = approach( hspd, 0, fric );

}


if (on_ground) {

    //No Jumping

} else {
    //Gravity
    vspd = approach( vspd, S_MAX_V, S_GRAVITY );
}

if hp &lt;= 0
{
    instance_destroy()
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit = "yes";

sound_stop(snd_enemy_hit1);
sound_play(snd_enemy_hit1);
hp -= 1;
if other.x &lt;= x
{
    //on left
    //image_blend = $8000ff;
    alarm[0] = 5;
    hspd = approach(hspd, random_range(1,5), 5);
    vspd = -1;
    moving = "left";
}
else
{
    //on right
    //image_blend = $8000ff;
    alarm[0] = 5;
    hspd = approach(hspd, random_range(-5,-1), 5);
    vspd = -1;
    moving = "right";
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if global.version &gt;= 3
    {
        sound_stop(snd_smallhit1);
        sound_play(snd_smallhit1);
    }
    
hp -= 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vertical Wall Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You've collided with a wall vertically, so stop moving vertically!
vspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Horizontal Wall Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You've collided with a wall horizontally, so stop moving horizontally!
hspd = 0;

if moving = "left"
{
moving = "right";
}
else
{
moving = "left";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Here the player is leaving the room, so the mapX/mapY must
//be changed and the player repositioned, then we can go to
//the new room.

if x &lt;= 0 {
    mapX -= 1;
    x = 639;
    x_counter = 0;
    stageGoto();
} else if x &gt;= 640 {
    mapX += 1;
    x = 1;
    x_counter = 0;
    stageGoto();
} else if y &lt;= 0 {
    mapY -= 1;
    y = 479;
    y_counter = 0;
    stageGoto();
} else if y &gt;= 480 {
    mapY += 1;
    y = 1;
    y_counter = 0;
    stageGoto();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if moving = "right"
{
    sprite_index = spr_enemy_walk_r;
    if hit = "yes"
    {
        sprite_index = spr_enemy_hit_r;
    }
}
if moving = "left"
{
    sprite_index = spr_enemy_walk_l;
    if hit = "yes"
    {
        sprite_index = spr_enemy_hit_l;
    }
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
