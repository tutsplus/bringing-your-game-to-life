<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This object will never actually be instantiated - it's just
//a parent for all objects which will use the custom movement
//system.

S_SLOPE_SLOW = 0.5;     //Slow down while climbing slopes

//This variables hold the actual speed the object is travelling at
hspd = 0;
vspd = 0;

//These variables have their respective speeds added to them at each
//step.  The object is moved based on these rounded, but the un-used
//fraction of a pixel is saved for next step, so objects with a
//speed less than 1 will still gradually move.
h_counter = 0;
v_counter = 0;

//This variables holds whether the object is sitting on solid ground.
on_ground = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var h, v, collide, slope;

//Add to the counters, then get the h and v (pixels to move this step) from them.
h_counter += hspd;
v_counter += vspd;
h = round( h_counter );
v = round( v_counter );
h_counter -= h;
v_counter -= v;

//This loop will move the object based on hspd.  The object will never
//actually collide with a floor object, because this loop (and the next one for vspd) 
//will always position it right next to them without overlapping.  If the
//object collides with a wall, it will call one of two events:
// User Event 0 - if the collision is horizontal
// User Event 1 - if the collision is vertical
collide = false;
slope = false;
repeat (abs(h))
{
    if (place_meeting(x + sign(h), y, obj_floor))
    {
        if (!place_meeting(x + sign(h), y - 1, obj_floor))
        {
            //Running up slopes
            y -= 1;
            x += sign(h);
            slope = true;
        }
        else
        {
            //Hit a wall
            collide = true;
            break;
        }
    }
    else
    {
        if (on_ground)
        {
            if (!place_meeting(x + sign(h), y + 1, obj_floor) &amp;&amp; place_meeting(x + sign(h), y + 2, obj_floor))
                y += 1;
        }
        x += sign(h);  
    }

}

if (collide)
    event_perform(ev_other, ev_user0);
    
if (slope)
    hspd = approach(hspd, 0, S_SLOPE_SLOW);
    
collide = false;
repeat (abs(v))
{
    if (vspd &lt;= 0)
    {
        if (place_meeting( x, y + sign(v), obj_floor))
        {
            collide = true;
            break;
        }
        else
            y += sign(v);
    }
    else if (checkBelow())
    {
        collide = true;
        break;
    }
    else
        y += sign(v);

}

if (collide)
    event_perform( ev_other, ev_user1 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>on_ground = checkBelow();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
