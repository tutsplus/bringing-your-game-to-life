<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_r</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_moveable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Physics objects must call the parent object's create event
//to initialize physics variables.  Here we are calling it
//BEFORE we initialize the player's stats because obj_moveable
//also defines S_SLOPE_SLOW for itself and we want to
//overwrite the value of it with one specifically for obj_player
event_inherited();

//Here some player stats are defined (so they can be easily
//tweaked if needed).
S_GRAVITY       = 0.3;      //Accel. due to gravity (pixels/step*step)
S_RUN_ACCEL     = 0.3;      //Accel. from running on ground (pixels/step*step)
S_RUN_FRIC      = 0.5;      //Friction on the ground (pixels/step*step)
S_AIR_ACCEL     = 0.4;      //Accel. from running in the air (pixels/step*step)
S_AIR_FRIC      = 0.2;      //Friction in the air (pixels/step*step)
S_JUMP_SPEED    = -6;
S_DJUMP_SPEED   = -4;       //Double jump speed
S_MAX_H         = 4;        //Max horizontal speed
S_MAX_V         = 5;        //Max vertical speed
S_SLOPE_SLOW    = 0.7;      //Decceleration while climbing slopes

//Whether the player can currently double jump
// added in version 5, so check version
if global.version &gt;= 5
    {
        candj = true;  
    }
else
    {
        candj = false;
    }
 

image_xscale = 2;
image_yscale = 2;

// no animation
image_speed = 0;
// set animation to ON if ver = 2+
if global.version &gt;= 2
{
    image_speed = .25;
}

facing = "right";
state = "idle";

instance_create(x,y,obj_gun);

// impact particle creation
impact_particle_system = part_system_create()

impact_particle = part_type_create();
part_type_shape(impact_particle,pt_shape_square);
part_type_size(impact_particle,0.025,0.050,0.00,0);
part_type_scale(impact_particle,1,1);
part_type_color1(impact_particle,16777215);
part_type_alpha3(impact_particle,1,1,0.25);
part_type_speed(impact_particle,0.50,3,0,0);
part_type_direction(impact_particle,0,359,0,0);
part_type_gravity(impact_particle,0.03,270);
part_type_orientation(impact_particle,0,0,0,0,1);
part_type_blend(impact_particle,1);
part_type_life(impact_particle,15,60);

// blood particle creation
blood_particle_system = part_system_create()

blood_part1 = part_type_create();
part_type_shape(blood_part1,pt_shape_explosion);
part_type_size(blood_part1,0.05,0.10,0.03,0);
part_type_scale(blood_part1,1,1);
part_type_color1(blood_part1,$cb6a00);
part_type_alpha3(blood_part1,1,0.50,0.10);
part_type_speed(blood_part1,0,0,0,0);
part_type_direction(blood_part1,0,0,0,0);
part_type_gravity(blood_part1,0,270);
part_type_orientation(blood_part1,0,359,0,0,1);
part_type_blend(blood_part1,0);
part_type_life(blood_part1,10,30);

blood_part2 = part_type_create();
part_type_shape(blood_part2,pt_shape_cloud);
part_type_size(blood_part2,0.05,0.10,0,0);
part_type_scale(blood_part2,1,1);
part_type_color1(blood_part2,$cb6a00);
part_type_alpha2(blood_part2,1,0.25);
part_type_speed(blood_part2,1,1,0,0);
part_type_direction(blood_part2,0,180,0,0);
part_type_gravity(blood_part2,0.03,270);
part_type_orientation(blood_part2,0,0,0,0,1);
part_type_blend(blood_part2,0);
part_type_life(blood_part2,10,60);

part_type_death(blood_part1,3,blood_part2);

// play BGM on v10 +
sound_stop(snd_song);
if global.version &gt;= 10
{
sound_loop(snd_song);
}

// create controls banner
instance_create(x,y,obj_controls);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*      PLAYER INPUT EVAL       */

var accel, fric;
if (on_ground) {
    state = "grounded";
    accel = S_RUN_ACCEL;
    fric = S_RUN_FRIC;
} else {
    accel = S_AIR_ACCEL;
    fric = S_AIR_FRIC;
}


if (keyboard_check_direct( key_right )) {
    //Running right
    
    //First add friction if currently running left
    if (hspd &lt; 0)
        hspd = approach( hspd, 0, fric );
        
    hspd = approach( hspd, S_MAX_H, accel ); 
    if state != "jumping"
    {
        facing = "right";
        state = "run";
    }

} else if (keyboard_check_direct( key_left )) {
    //Running left
    
    //First add friction if currently running right
    if (hspd &gt; 0)
        hspd = approach( hspd, 0, fric );
        
    hspd = approach( hspd, -S_MAX_H, accel );
    if state != "jumping"
    {
        facing = "left";
        state = "run";
    }

} else {
    //Stopping

    hspd = approach( hspd, 0, fric );
    if state!= "jumping"
    {
        state = "idle";
    }

}


if (on_ground) {

    // check version for double jump availability
    if global.version &gt;= 5
    {
        candj = true;
    }
    
    //Jumping
    if (keyboard_check_pressed( key_jump ))
        {
        
        // jump sound - check version
        if global.version &gt;= 3
        {
            if global.version &gt;= 5
            {
                // 5th version - choose from 4 random jump sounds
                chosenjump = choose(snd_jump1, snd_jump2, snd_jump3, snd_jump4);
                sound_stop(chosenjump);
                sound_play(chosenjump);
            }
            else
            {
                // 3rd version - play one jump sound only
                sound_stop(snd_jump1);
                sound_play(snd_jump1);
            }
        
        }
        vspd = S_JUMP_SPEED;
        state = "jumping";
        image_index = 0;
        
            // create particles on v8+ only
            if global.version &gt;= 8
            {
                instance_create(x-5,y+16,obj_jump_dust_2);
                instance_create(x,y+16,obj_jump_dust_2);
                instance_create(x+5,y+16,obj_jump_dust_2);
            }
            
        }

} else {

    //Gravity
    vspd = approach( vspd, S_MAX_V, S_GRAVITY );

    //Double jumping
    if (keyboard_check_pressed( key_jump ) &amp;&amp; candj) 
    {
       // double jump sound
       if global.version &gt;= 5
            {
                // 5th version - choose from 4 random jump sounds
                chosenjump = choose(snd_jump1, snd_jump2, snd_jump3, snd_jump4);
                sound_stop(chosenjump);
                sound_play(chosenjump);
            }
            
        candj = false;
        vspd = S_DJUMP_SPEED;
        image_index = 0;
    }
}

// shooting codes

if (keyboard_check_released( key_shoot ))
{

    // create screen shake and shell (check version first)
    
             if global.version &gt;= 6
             {
                  instance_create(x,y,obj_screen_shake_small);
             }
             
             if global.version &gt;= 10
             {
                  instance_create(x,y,obj_shell);
             }
    
    // emit the sound
    // check the version first
    if global.version &gt;= 3
    {
        
        if global.version &lt; 6
        {
            // emit crappy sound
            sound_stop(snd_smallshoot1);
            sound_play(snd_smallshoot1);
        }
        else
        {
            // emit the good sound
            soundchosen = choose(snd_shotgun1, snd_shotgun2, snd_shotgun3);
            sound_stop(soundchosen);
            sound_play(soundchosen);
        }
    }
    

    
    //muzzle flash effect
   // spawns on bullet create!
    
    if facing = "left"
    {
    
        //bullet spawn code (2 bullet types - check version first)
        bullet_positionx = obj_gun.x-10;
        bullet_positiony = obj_gun.y+10;
            
        if global.version &gt;= 6
        {
            
            instance_create(bullet_positionx, bullet_positiony, obj_bullet2);
        }
        else
        {
            instance_create(bullet_positionx, bullet_positiony, obj_bullet1);
        }
    
    // RECOIL! check version
    if global.version &gt;= 6
        {
            hspd = approach(hspd, 10, 5);
        }
    
    }
    if facing = "right"
    {
    
        //bullet spawn code (2 bullet types - check version first)
        bullet_positionx = obj_gun.x+10;
        bullet_positiony = obj_gun.y+10;
        
        if global.version &gt;= 6
        {
            instance_create(bullet_positionx, bullet_positiony, obj_bullet2);
        }
        else
        {
            instance_create(bullet_positionx, bullet_positiony, obj_bullet1);
        }
    
    //RECOIL! check version
    if global.version &gt;= 6
        {
            hspd = approach(hspd, -10, 5);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vertical Wall Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You've collided with a wall vertically, so stop moving vertically!
vspd = 0;

// create particle only if version 8+

if global.version &gt;= 8
{

    if place_meeting(x,y+16,obj_floor)
    {
       instance_create(x,y+16,obj_jump_dust); 
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Horizontal Wall Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You've collided with a wall horizontally, so stop moving horizontally!
hspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animation code
if state = "idle"
{
        if facing = "right"
        {
             //check if version 2+ - then create animation
             if global.version &gt;= 2
             {
                  image_speed = .15;
             }
             
             sprite_index = spr_player_idle_r;
        }
         if facing = "left"
        {
             //check if version 2+ - then create animation
             if global.version &gt;= 2
             {
                  image_speed = .15;
             }
             
             sprite_index = spr_player_idle_l;
        }
}

if state = "run"
{
    if facing = "right"
    {
        //check if version 2+ - then create animation
             if global.version &gt;= 2
             {
                  image_speed = .20;
             }
             
        sprite_index = spr_player_walk_r;
    }
     if facing = "left"
    {
        //check if version 2+ - then create animation
             if global.version &gt;= 2
             {
                  image_speed = .20;
             }
             
        sprite_index = spr_player_walk_l;
    }
}

if state = "jumping"
{
    if facing = "right"
    {
        //check if version 2+ - then create animation
             if global.version &gt;= 2
             {
                  image_speed = .25;
             }
             
        sprite_index = spr_player_jump_r;
    }
    if facing = "left"
    {
        //check if version 2+ - then create animation
             if global.version &gt;= 2
             {
                  image_speed = .25;
             }
             
        sprite_index = spr_player_jump_l;
    }
    //check for end of jump animation - if end, freeze animation
    if image_index = 9
    {
        image_speed = 0;
    }
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_previous(room) != -1
   {
   room_goto(room_previous(room));
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_next(room) != -1
   {
   room_goto(room_next(room));
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
